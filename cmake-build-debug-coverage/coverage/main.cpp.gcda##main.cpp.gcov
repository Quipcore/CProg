        -:    0:Source:E:/Code/Skola/Su/CProg/CProg-Project/src/main.cpp
        -:    0:Graph:E:\Code\Skola\Su\CProg\CProg-Project\cmake-build-debug-coverage\CMakeFiles\Play.dir\src\main.cpp.gcno
        -:    0:Data:E:\Code\Skola\Su\CProg\CProg-Project\cmake-build-debug-coverage\CMakeFiles\Play.dir\src\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#define SDL_MAIN_HANDLED
        -:    2:
        -:    3://#include "games/Game.h"
        -:    4://#include "games/Tetris.h"
        -:    5://#include "games/Wolfenstein.h"
        -:    6:
        -:    7:#include <vector>
        -:    8:#include <iostream>
        -:    9:#include "games/Wolfenstein.h"
        -:   10:
function main called 1 returned 100% blocks executed 63%
        1:   11:int main( int argc, char* args[] )
        -:   12:{
        -:   13:    //START
        -:   14:    std::vector<Game*> games = {
        1:   15:            new Wolfenstein(),
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   15-block  1
call    3 never executed
        -:   16:            //new Tetris()
        2:   17:    };
        1:   17-block  0
call    0 returned 1
        1:   17-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   17-block  2
    $$$$$:   17-block  3
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:   17-block  4
        -:   18:
        2:   19:    for(Game* game : games){
call    0 returned 1
call    1 returned 1
        1:   19-block  0
call    2 returned 1
        1:   19-block  1
call    3 returned 1
        2:   19-block  2
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        1:   20:        game->run();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   21:    }
        -:   22:
        -:   23:
        -:   24:
        1:   25:    return 0;
        -:   26:    //STOP
        -:   27:
        -:   28:
        -:   29://    std::vector<GameObject*> gameObjects = {
        -:   30://            new class Player()
        -:   31://    };
        -:   32://    return springhawk::Engine::run(SCREEN_WIDTH, SCREEN_HEIGHT, gameObjects);
        1:   33:}
        1:   33-block  0
call    0 returned 1
    $$$$$:   33-block  1
call    1 never executed
